# selenium_utils.py

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

import os
import logging
from config import CONFIG

logger = logging.getLogger(__name__)
SCREENSHOT_PATH = "screenshot.png"
SELENIUM_TIMEOUT = 30  # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤


def make_confluence_screenshot():
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
    """
    logger.info("üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.delete_all_cookies()
        logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ Confluence")
        driver.get(CONFIG["CONFLUENCE"]["LOGIN_URL"])

        logger.info("‚è≥ –ñ–¥—ë–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.ID, "os_username"))
        ).send_keys(CONFIG["CONFLUENCE"]["USERNAME"])
        driver.find_element(By.ID, "os_password").send_keys(CONFIG["CONFLUENCE"]["PASSWORD"])
        driver.find_element(By.ID, "loginButton").click()

        logger.info("‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {CONFIG['CONFLUENCE']['TARGET_URL']}")
        driver.get(CONFIG["CONFLUENCE"]["TARGET_URL"])

        logger.info("‚è≥ –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            lambda d: d.execute_script('return document.readyState') == 'complete'
        )

        current_url = driver.current_url
        logger.info(f"üåê –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_url}")

        total_height = driver.execute_script("return document.body.scrollHeight")
        driver.set_window_size(1920, total_height)

        logger.info(f"üì∑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤: {os.path.abspath(SCREENSHOT_PATH)}")
        success = driver.save_screenshot(SCREENSHOT_PATH)

        if success:
            logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return success

    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Confluence: {str(e)}", exc_info=True)
        return False

    finally:
        try:
            driver.quit()
            logger.info("üõë –ó–∞–∫—Ä—ã–ª–∏ –¥—Ä–∞–π–≤–µ—Ä Selenium")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä: {str(e)}")


def make_jira_screenshot(jira_url: str):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ —Å—Å—ã–ª–∫–µ –≤ JIRA
    """
    logger.info(f"üì∏ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ JIRA: {jira_url}")
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ JIRA")
        driver.get(CONFIG["JIRA"]["LOGIN_URL"])

        logger.info("‚è≥ –ñ–¥—ë–º –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.ID, "login-form-username"))
        ).send_keys(CONFIG["JIRA"]["USERNAME"])
        driver.find_element(By.ID, "login-form-password").send_keys(CONFIG["JIRA"]["PASSWORD"])
        driver.find_element(By.ID, "login-form-submit").click()

        logger.info("‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã JIRA")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {jira_url}")
        driver.get(jira_url)

        logger.info("‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        total_height = driver.execute_script("return document.body.scrollHeight")
        driver.set_window_size(1920, total_height)

        logger.info(f"üì∑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤: {os.path.abspath(SCREENSHOT_PATH)}")
        success = driver.save_screenshot(SCREENSHOT_PATH)

        if success:
            logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return success

    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ JIRA: {str(e)}", exc_info=True)
        return False

    finally:
        try:
            driver.quit()
            logger.info("üõë –ó–∞–∫—Ä—ã–ª–∏ –¥—Ä–∞–π–≤–µ—Ä Selenium")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä: {str(e)}")


def make_confluence_screenshot_page(confluence_url: str):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤ Confluence
    """
    logger.info(f"üì∏ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Confluence: {confluence_url}")
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0 Safari/537.36")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.delete_all_cookies()
        logger.info("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ Confluence")
        driver.get(CONFIG["CONFLUENCE"]["LOGIN_URL"])

        logger.info("‚è≥ –ñ–¥—ë–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.ID, "os_username"))
        ).send_keys(CONFIG["CONFLUENCE"]["USERNAME"])
        driver.find_element(By.ID, "os_password").send_keys(CONFIG["CONFLUENCE"]["PASSWORD"])
        driver.find_element(By.ID, "loginButton").click()

        logger.info("‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {confluence_url}")
        driver.get(confluence_url)

        logger.info("‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        WebDriverWait(driver, SELENIUM_TIMEOUT).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        total_height = driver.execute_script("return document.body.scrollHeight")
        driver.set_window_size(1920, total_height)

        logger.info(f"üì∑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤: {os.path.abspath(SCREENSHOT_PATH)}")
        success = driver.save_screenshot(SCREENSHOT_PATH)

        if success:
            logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        return success

    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Confluence: {str(e)}", exc_info=True)
        return False

    finally:
        try:
            driver.quit()
            logger.info("üõë –ó–∞–∫—Ä—ã–ª–∏ –¥—Ä–∞–π–≤–µ—Ä Selenium")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä–∞–π–≤–µ—Ä: {str(e)}")