"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–∞.
"""
import logging
import os
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from common.auth import admin_required
from common.jira.client import JiraApiClient
from common.jira.config import JiraConfig
from common.jira.ticket_creator import create_technical_issue, create_sick_leave

from bots.contact_center_bot.keyboards import (
    create_main_keyboard, 
    create_cancel_keyboard, 
    create_problem_side_keyboard, 
    create_confirm_keyboard,
    create_for_who_keyboard
)
from bots.contact_center_bot.states import TechnicalIssueStates, SickLeaveStates
from bots.contact_center_bot.config import AUTH_ENABLED as BOT_AUTH_ENABLED

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
@router.message(Command("help"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=create_main_keyboard()
    )

@router.message(F.text == "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞")
@admin_required(auth_enabled_for_bot=BOT_AUTH_ENABLED)
async def start_technical_issue(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ."""
    await state.set_state(TechnicalIssueStates.ENTER_EMPLOYEE_NAME)
    await message.answer(
        "üîß –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=create_cancel_keyboard()
    )

@router.message(TechnicalIssueStates.ENTER_EMPLOYEE_NAME)
async def enter_employee_name_tech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–∏."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    await state.update_data(employee_name=message.text)
    await state.set_state(TechnicalIssueStates.ENTER_MANAGER_NAME)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=create_cancel_keyboard()
    )

@router.message(TechnicalIssueStates.ENTER_MANAGER_NAME)
async def enter_manager_name_tech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–∏."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    await state.update_data(manager_name=message.text)
    await state.set_state(TechnicalIssueStates.ENTER_DESCRIPTION)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=create_cancel_keyboard()
    )

@router.message(TechnicalIssueStates.ENTER_DESCRIPTION)
async def enter_description_tech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–∏."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    await state.update_data(description=message.text)
    await state.set_state(TechnicalIssueStates.ENTER_DATE)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: dd.mm.yyyy):",
        reply_markup=create_cancel_keyboard()
    )

@router.message(TechnicalIssueStates.ENTER_DATE)
async def enter_date_tech(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    try:
        parsed_date = datetime.strptime(message.text, "%d.%m.%Y")
        jira_date = parsed_date.strftime("%Y-%m-%d")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17.06.2025):",
            reply_markup=create_cancel_keyboard()
        )
        return
    await state.update_data(date=jira_date)
    await state.set_state(TechnicalIssueStates.ENTER_START_TIME)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: HH:MM):",
        reply_markup=create_cancel_keyboard()
    )

@router.message(TechnicalIssueStates.ENTER_START_TIME)
async def enter_start_time_tech(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    try:
        parsed_time = datetime.strptime(message.text, "%H:%M")
        jira_time = parsed_time.strftime("%H:%M")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):",
            reply_markup=create_cancel_keyboard()
        )
        return
    await state.update_data(start_time=jira_time)
    await state.set_state(TechnicalIssueStates.ENTER_PROBLEM_SIDE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=create_problem_side_keyboard()
    )

@router.message(TechnicalIssueStates.ENTER_PROBLEM_SIDE)
async def enter_problem_side_tech(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    if message.text not in ["üë§ –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "üè¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏"]:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=create_problem_side_keyboard()
        )
        return
    await state.update_data(problem_side=message.text)
    await state.set_state(TechnicalIssueStates.CONFIRMATION)
    data = await state.get_data()
    summary = f"""
üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ:</b>

üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {data['employee_name']}
üë®‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {data['manager_name']}
ÔøΩÔøΩ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}
üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}
‚è∞ <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</b> {data['start_time']}
üéØ <b>–°—Ç–æ—Ä–æ–Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã:</b> {data['problem_side']}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:
    """
    await message.answer(summary, reply_markup=create_confirm_keyboard())

@router.message(TechnicalIssueStates.CONFIRMATION)
async def confirm_technical_issue(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=create_confirm_keyboard()
        )
        return
    data = await state.get_data()
    try:
        config = JiraConfig(
            JIRA_URL=os.getenv("JIRA_URL"),
            JIRA_API_TOKEN=os.getenv("JIRA_API_TOKEN"),
            JIRA_DEFAULT_PROJECT="SCHED"
        )
        async with JiraApiClient(config) as client:
            issue = await create_technical_issue(
                client=client,
                employee_name=data["employee_name"],
                manager_name=data["manager_name"],
                description=data["description"],
                date=data["date"],
                start_time=data["start_time"],
                problem_side=data["problem_side"]
            )
            jira_ticket_url = f"{config.JIRA_URL}/browse/{issue.get('key')}"
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <a href=\"{jira_ticket_url}\">{issue.get('key')}</a>\n"
                f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['employee_name']}\n"
                f"‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {data['manager_name']}",
                reply_markup=create_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
    finally:
        await state.clear()

@router.message(F.text == "üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π")
@admin_required(auth_enabled_for_bot=BOT_AUTH_ENABLED)
async def start_sick_leave(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º."""
    await state.set_state(SickLeaveStates.ENTER_EMPLOYEE_NAME)
    await message.answer(
        "üè• –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=create_cancel_keyboard()
    )

@router.message(SickLeaveStates.ENTER_EMPLOYEE_NAME)
async def enter_employee_name_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    await state.update_data(employee_name=message.text)
    await state.set_state(SickLeaveStates.ENTER_MANAGER_NAME)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=create_cancel_keyboard()
    )

@router.message(SickLeaveStates.ENTER_MANAGER_NAME)
async def enter_manager_name_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    await state.update_data(manager_name=message.text)
    await state.set_state(SickLeaveStates.ENTER_OPEN_DATE)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ (—Ñ–æ—Ä–º–∞—Ç: dd.mm.yyyy):",
        reply_markup=create_cancel_keyboard()
    )

@router.message(SickLeaveStates.ENTER_OPEN_DATE)
async def enter_open_date_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy
        parsed_date = datetime.strptime(message.text, "%d.%m.%Y")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è JIRA
        jira_date = parsed_date.strftime("%Y-%m-%d")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä: 17.06.2025):",
            reply_markup=create_cancel_keyboard()
        )
        return
    
    await state.update_data(open_date=jira_date)
    await state.set_state(SickLeaveStates.ENTER_FOR_WHO)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç –±–æ–ª—å–Ω–∏—á–Ω—ã–π:",
        reply_markup=create_for_who_keyboard()
    )

@router.message(SickLeaveStates.ENTER_FOR_WHO)
async def enter_for_who_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç –±–æ–ª—å–Ω–∏—á–Ω—ã–π."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    if message.text not in ["üë§ –ü–æ —É—Ö–æ–¥—É –∑–∞ –±–æ–ª—å–Ω—ã–º", "üè• –ù–∞ —Å–µ–±—è"]:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=create_for_who_keyboard()
        )
        return
    
    await state.update_data(for_who=message.text)
    await state.set_state(SickLeaveStates.ENTER_DESCRIPTION)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):",
        reply_markup=create_cancel_keyboard()
    )

@router.message(SickLeaveStates.ENTER_DESCRIPTION)
async def enter_description_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    await state.update_data(description=message.text)
    await state.set_state(SickLeaveStates.CONFIRMATION)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    summary = f"""
üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º:</b>

üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {data['employee_name']}
üë®‚Äçüíº <b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {data['manager_name']}
üìÖ <b>–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è:</b> {data['open_date']}
üéØ <b>–ù–∞ –∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç:</b> {data['for_who']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:
    """
    await message.answer(summary, reply_markup=create_confirm_keyboard())

@router.message(SickLeaveStates.CONFIRMATION)
async def confirm_sick_leave(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º."""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return
    
    if message.text != "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=create_confirm_keyboard()
        )
        return
    
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç JIRA
        config = JiraConfig(
            JIRA_URL=os.getenv("JIRA_URL"),
            JIRA_API_TOKEN=os.getenv("JIRA_API_TOKEN"),
            JIRA_DEFAULT_PROJECT="SCHED"
        )
        
        async with JiraApiClient(config) as client:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            issue = await create_sick_leave(
                client=client,
                employee_name=data["employee_name"],
                manager_name=data["manager_name"],
                description=data["description"],
                open_date=data["open_date"],
                for_who=data["for_who"]
            )
            
            jira_ticket_url = f"{config.JIRA_URL}/browse/{issue.get('key')}"
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <a href=\"{jira_ticket_url}\">{issue.get('key')}</a>\n"
                f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['employee_name']}\n"
                f"‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {data['manager_name']}\n"
                f"‚Ä¢ –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {data['open_date']}\n"
                f"‚Ä¢ –ù–∞ –∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç: {data['for_who']}",
                reply_markup=create_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
    
    finally:
        await state.clear() 