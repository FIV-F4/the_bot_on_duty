"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–∞.
"""
import logging
import os
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from common.auth import admin_required
from common.jira.client import JiraApiClient
from common.jira.config import JiraConfig
from common.jira.ticket_creator import create_technical_issue, create_sick_leave

from bots.contact_center_bot.keyboards import create_main_keyboard
from bots.contact_center_bot.states import TechnicalIssueStates, SickLeaveStates
from bots.contact_center_bot.config import AUTH_ENABLED as BOT_AUTH_ENABLED

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
@router.message(Command("help"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help."""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=create_main_keyboard()
    )

@router.message(F.text == "–¢–µ—Ö. –Ω–µ–ø–æ–ª–∞–¥–∫–∞")
@admin_required(auth_enabled_for_bot=BOT_AUTH_ENABLED)
async def start_technical_issue(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ."""
    await state.set_state(TechnicalIssueStates.ENTER_EMPLOYEE_NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")

@router.message(TechnicalIssueStates.ENTER_EMPLOYEE_NAME)
async def enter_employee_name_tech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–∏."""
    await state.update_data(employee_name=message.text)
    await state.set_state(TechnicalIssueStates.ENTER_MANAGER_NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:")

@router.message(TechnicalIssueStates.ENTER_MANAGER_NAME)
async def enter_manager_name_tech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–∏."""
    await state.update_data(manager_name=message.text)
    await state.set_state(TechnicalIssueStates.ENTER_DESCRIPTION)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")

@router.message(TechnicalIssueStates.ENTER_DESCRIPTION)
async def enter_description_tech(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–ø–æ–ª–∞–¥–∫–µ."""
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç JIRA
        config = JiraConfig(
            JIRA_URL=os.getenv("JIRA_URL"),
            JIRA_API_TOKEN=os.getenv("JIRA_API_TOKEN"),
            JIRA_DEFAULT_PROJECT="SCHED"
        )
        
        async with JiraApiClient(config) as client:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            issue = await create_technical_issue(
                client=client,
                employee_name=data["employee_name"],
                manager_name=data["manager_name"],
                description=message.text
            )
            
            jira_ticket_url = f"{config.JIRA_URL}/browse/{issue.get('key')}"
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <a href=\"{jira_ticket_url}\">{issue.get('key')}</a>\n"
                f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['employee_name']}\n"
                f"‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {data['manager_name']}",
                reply_markup=create_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
    
    finally:
        await state.clear()

@router.message(F.text == "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π")
@admin_required(auth_enabled_for_bot=BOT_AUTH_ENABLED)
async def start_sick_leave(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º."""
    await state.set_state(SickLeaveStates.ENTER_EMPLOYEE_NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")

@router.message(SickLeaveStates.ENTER_EMPLOYEE_NAME)
async def enter_employee_name_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ."""
    await state.update_data(employee_name=message.text)
    await state.set_state(SickLeaveStates.ENTER_MANAGER_NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:")

@router.message(SickLeaveStates.ENTER_MANAGER_NAME)
async def enter_manager_name_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ."""
    await state.update_data(manager_name=message.text)
    await state.set_state(SickLeaveStates.ENTER_DESCRIPTION)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª—å–Ω–∏—á–Ω–æ–≥–æ:")

@router.message(SickLeaveStates.ENTER_DESCRIPTION)
async def enter_description_sick(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ –±–æ–ª—å–Ω–∏—á–Ω–æ–º."""
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç JIRA
        config = JiraConfig(
            JIRA_URL=os.getenv("JIRA_URL"),
            JIRA_API_TOKEN=os.getenv("JIRA_API_TOKEN"),
            JIRA_DEFAULT_PROJECT="SCHED"
        )
        
        async with JiraApiClient(config) as client:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            issue = await create_sick_leave(
                client=client,
                employee_name=data["employee_name"],
                manager_name=data["manager_name"],
                description=message.text
            )
            
            jira_ticket_url = f"{config.JIRA_URL}/browse/{issue.get('key')}"
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <a href=\"{jira_ticket_url}\">{issue.get('key')}</a>\n"
                f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {data['employee_name']}\n"
                f"‚Ä¢ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {data['manager_name']}\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}",
                reply_markup=create_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
    
    finally:
        await state.clear() 