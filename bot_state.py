# bot_state.py

import os
import asyncio
import json
from datetime import datetime
from typing import Dict, Any, Optional
from threading import RLock
from collections import deque
import logging
from aiogram.fsm.state import State
from config import CONFIG

logger = logging.getLogger(__name__)
STATE_FILE = "data/state.json"
os.makedirs(os.path.dirname(STATE_FILE), exist_ok=True)


def safe_parse_time(time_str: str) -> Optional[datetime]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
    """
    if not time_str:
        return None
    try:
        # –ï—Å–ª–∏ —É–∂–µ datetime ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if isinstance(time_str, datetime):
            return time_str
        # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ ISO-—Å—Ç—Ä–æ–∫—É
        return datetime.fromisoformat(time_str)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è: {time_str} ({e})")
        return None


class BotState:
    def __init__(self):
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotState")
        self.active_alarms: Dict[str, Dict] = {}
        self.user_states: Dict[int, Dict] = {}
        self._lock = RLock()
        self.extension_queue: Dict[int, deque] = {}  # {user_id: deque(alarm_ids)}
        self.user_processing: set = set()
        self.active_maintenances: Dict[str, Dict] = {}

    def get_user_active_alarms(self, user_id: int) -> dict:
        return {
            aid: alarm for aid, alarm in self.active_alarms.items()
            if alarm["user_id"] == user_id
        }

    def get_user_active_maintenances(self, user_id: int) -> dict:
        return {
            wid: work for wid, work in self.active_maintenances.items()
            if work["user_id"] == user_id or user_id in CONFIG["TELEGRAM"].get("SUPERADMIN_IDS", [])
        }

    def _save_to_file(self, state: dict):
        """–ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)

    async def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        logger.info("üíæ –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞")

        state = {
            'active_alarms': {},
            'active_maintenances': {},
            'user_states': {}
        }

        with self._lock:
            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π ---
            for alarm_id, alarm in self.active_alarms.items():
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –∞–≤–∞—Ä–∏—é: {alarm_id}")
                fix_time = alarm['fix_time']
                created_at = alarm.get('created_at')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ–¥ isoformat
                state['active_alarms'][alarm_id] = {
                    'issue': alarm['issue'],
                    'fix_time': fix_time.isoformat() if isinstance(fix_time, datetime) else fix_time,
                    'user_id': alarm['user_id'],
                    'created_at': created_at.isoformat() if isinstance(created_at, datetime) else created_at
                }

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç ---
            for work_id, work in self.active_maintenances.items():
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–∞–±–æ—Ç—É: {work_id}")
                start_time = work['start_time']
                end_time = work['end_time']
                created_at = work['created_at']

                state['active_maintenances'][work_id] = {
                    'description': work['description'],
                    'start_time': start_time.isoformat() if isinstance(start_time, datetime) else start_time,
                    'end_time': end_time.isoformat() if isinstance(end_time, datetime) else end_time,
                    'unavailable_services': work.get('unavailable_services', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'user_id': work.get('user_id'),
                    'created_at': created_at.isoformat() if isinstance(created_at, datetime) else created_at
                }

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
            for user_id, user_state in self.user_states.items():
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                state['user_states'][str(user_id)] = {
                    'state': user_state['state'].name if isinstance(user_state['state'], State) else user_state['state'],
                    'alarm_id': user_state.get('alarm_id'),
                    'issue': user_state.get('issue')
                }

        try:
            await asyncio.to_thread(self._save_to_file, state)
            logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}", exc_info=True)

    async def load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        logger.info("üìÇ –ó–∞–≥—Ä—É–∂–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞...")
        try:
            data = await asyncio.to_thread(json.load, open(STATE_FILE, "r", encoding="utf-8"))
            logger.info("‚úÖ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω")
            with self._lock:
                self.active_alarms.clear()
                self.active_maintenances.clear()
                self.user_states.clear()

            # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ä–∏–π ---
            for alarm_id, alarm_data in data.get("active_alarms", {}).items():
                fix_time = safe_parse_time(alarm_data.get("fix_time"))
                created_at = safe_parse_time(alarm_data.get("created_at"))

                if not all([fix_time, created_at]):
                    continue

                self.active_alarms[alarm_id] = {
                    "issue": alarm_data["issue"],
                    "fix_time": fix_time,
                    "user_id": alarm_data["user_id"],
                    "created_at": created_at
                }
                logger.debug(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤–∞—Ä–∏—è: {alarm_id}")

            # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç ---
            for work_id, work_data in data.get("active_maintenances", {}).items():
                start_time = safe_parse_time(work_data.get("start_time"))
                end_time = safe_parse_time(work_data.get("end_time"))
                created_at = safe_parse_time(work_data.get("created_at"))

                if not all([start_time, end_time, created_at]):
                    continue

                self.active_maintenances[work_id] = {
                    "description": work_data["description"],
                    "start_time": start_time,
                    "end_time": end_time,
                    "user_id": work_data["user_id"],
                    "created_at": created_at,
                    "unavailable_services": work_data.get("unavailable_services", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                }
                logger.debug(f"üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞: {work_id}")

            # --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
            for user_id_str, user_state in data.get("user_states", {}).items():
                try:
                    user_id = int(user_id_str)
                    state_name = user_state.get('state')
                    alarm_id = user_state.get('alarm_id')
                    issue = user_state.get('issue')

                    if not state_name:
                        continue

                    self.user_states[user_id] = {
                        'state': state_name,
                        'alarm_id': alarm_id,
                        'issue': issue
                    }
                except ValueError as ve:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {ve}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

        except FileNotFoundError:
            logger.info("üÜï –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        except json.JSONDecodeError as je:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è: {je}")
            logger.info("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ")
        except Exception as e:
            logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}", exc_info=True)

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ ---
bot_state = BotState()