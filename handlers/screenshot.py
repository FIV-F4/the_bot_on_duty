# handlers/screenshot.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

import asyncio
import logging
from typing import Optional

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª–µ–π
from selenium_utils import make_confluence_screenshot, make_jira_screenshot, make_confluence_screenshot_page
from config import CONFIG
from keyboards import create_view_selection_keyboard, create_main_keyboard, create_cancel_keyboard
from utils.helpers import is_admin  # <-- –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å—Ç–≤–∞

logger = logging.getLogger(__name__)
router = Router()


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class ViewStates(StatesGroup):
    WAITING_URL = State()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.message(Command("view"))
@router.message(F.text == "üì∏ JIRA/Confluence")
async def view_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 'üì∏ JIRA/Confluence'")

    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå", parse_mode='HTML')
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_view_selection_keyboard()
    )


@router.message(F.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç")
async def take_calendar_screenshot(message: Message):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç'")

    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå", parse_mode='HTML')
        return

    msg = await message.answer("üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è...", reply_markup=ReplyKeyboardRemove())

    try:
        success = await asyncio.wait_for(
            asyncio.to_thread(make_confluence_screenshot),
            timeout=CONFIG.get("TASK_TIMEOUT", 30)
        )
        if success:
            await message.answer_photo(
                photo=FSInputFile("screenshot.png"),
                caption=f"üóìÔ∏è –í–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç!\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É]({CONFIG['CONFLUENCE']['TARGET_URL']})",
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", reply_markup=create_main_keyboard())
    except asyncio.TimeoutError:
        await message.answer("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞", reply_markup=create_main_keyboard())
    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Confluence: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_main_keyboard())
    finally:
        try:
            await message.answer_chat_action("delete_message")  # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è
            await message.delete()  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


@router.message(F.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å JIRA")
async def watch_jira(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å JIRA'")

    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå", parse_mode='HTML')
        return

    await state.set_state(ViewStates.WAITING_URL)
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ URL –∑–∞–¥–∞—á–∏ –≤ JIRA –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:",
        reply_markup=create_cancel_keyboard()
    )


@router.message(F.text == "üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Confluence")
async def watch_confluence(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Confluence'")

    if not is_admin(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå", parse_mode='HTML')
        return

    await state.set_state(ViewStates.WAITING_URL)
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Confluence –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:",
        reply_markup=create_cancel_keyboard()
    )


@router.message(ViewStates.WAITING_URL)
async def process_view_url(message: Message, state: FSMContext):
    url = message.text.strip()
    user_id = message.from_user.id

    if url == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.", reply_markup=create_cancel_keyboard())
        return

    msg = await message.answer("üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...", reply_markup=ReplyKeyboardRemove())

    try:
        is_jira = "jira" in url.lower()
        success = False

        if is_jira:
            success = await asyncio.wait_for(
                asyncio.to_thread(make_jira_screenshot, url),
                timeout=CONFIG.get("TASK_TIMEOUT", 30)
            )
        else:
            success = await asyncio.wait_for(
                asyncio.to_thread(make_confluence_screenshot_page, url),
                timeout=CONFIG.get("TASK_TIMEOUT", 30)
            )

        if success:
            caption = f"üìå –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n{url}"
            await message.answer_photo(
                photo=FSInputFile("screenshot.png"),
                caption=caption,
                parse_mode='Markdown',
                reply_markup=create_view_selection_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.", reply_markup=create_main_keyboard())
    except asyncio.TimeoutError:
        await message.answer("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞", reply_markup=create_main_keyboard())
    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å JIRA/Confluence: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_main_keyboard())
    finally:
        try:
            await message.delete()
            await bot.delete_message(msg.chat.id, msg.message_id)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await state.clear()