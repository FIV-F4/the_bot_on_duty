# handlers/current_events.py

import logging
from aiogram.filters import Command
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from bot_state import bot_state
from keyboards import create_event_list_keyboard, create_refresh_keyboard

logger = logging.getLogger(__name__)
router = Router()

ITEMS_PER_PAGE = 5  # –°–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


def format_alarms_page(alarms: dict, page: int) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–±–æ—ë–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ"""
    alarm_items = list(alarms.items())
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_items = alarm_items[start:end]

    if not page_items:
        return "üö® –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—ë–≤.", None

    text = "<b>üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ–∏:</b>\n\n"
    for alarm_id, alarm_info in page_items:
        try:
            fix_time = alarm_info["fix_time"].strftime("%d.%m.%Y %H:%M")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—è {alarm_id}: {e}")
            fix_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        author = alarm_info.get("user_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        text += (
            f"‚Ä¢ <code>{alarm_id}</code>\n"
            f"  üë§ –ê–≤—Ç–æ—Ä: {author}\n"
            f"  üïí –ò—Å–ø—Ä–∞–≤–∏–º –¥–æ: {fix_time}\n"
            f"  üîß –ü—Ä–æ–±–ª–µ–º–∞: {alarm_info['issue']}\n\n"
        )

    total_pages = (len(alarm_items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    return text, total_pages


def format_maintenances_page(maintenances: dict, page: int) -> tuple:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ"""
    maint_items = list(maintenances.items())
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    page_items = maint_items[start:end]

    if not page_items:
        return "üîß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç.", None

    text = "<b>üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b>\n\n"
    for work_id, work_info in page_items:
        try:
            start_time = work_info["start_time"].strftime("%d.%m.%Y %H:%M")
            end_time = work_info["end_time"].strftime("%d.%m.%Y %H:%M")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã {work_id}: {e}")
            start_time = end_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        description = work_info.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        author = work_info.get("user_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        text += (
            f"‚Ä¢ <code>{work_id}</code>\n"
            f"  üë§ –ê–≤—Ç–æ—Ä: {author}\n"
            f"  ‚è∞ –í—Ä–µ–º—è: {start_time} ‚Äî {end_time}\n"
            f"  üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        )

    total_pages = (len(maint_items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    return text, total_pages


@router.message(Command("alarm_list"))
@router.message(F.text == "üìï –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def show_current_events(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")

    await state.clear()
    await state.set_data({"page": 0})

    keyboard = create_event_list_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=keyboard)


@router.callback_query(lambda call: call.data in ["show_alarms", "show_maintenances"])
async def handle_list_callback(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    choice = call.data
    data = await state.get_data()
    page = data.get("page", 0)

    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {choice}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}")

    if choice == "show_alarms":
        alarms = bot_state.active_alarms
        text, total_pages = format_alarms_page(alarms, page)
        await state.update_data(view="alarms", total_pages=total_pages)

    elif choice == "show_maintenances":
        maintenances = bot_state.active_maintenances
        text, total_pages = format_maintenances_page(maintenances, page)
        await state.update_data(view="maintenances", total_pages=total_pages)

    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        total_pages = None

    markup = create_refresh_keyboard(current_page=page, total_pages=total_pages)
    try:
        await call.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
    except Exception as e:
        logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await call.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=markup)

    await call.answer()


@router.callback_query(F.data == "refresh_selection")
async def refresh_selection(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å¬ª")
    await call.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...", show_alert=False)

    data = await state.get_data()
    view = data.get("view", "alarms")
    page = data.get("page", 0)

    if view == "alarms":
        text, total_pages = format_alarms_page(bot_state.active_alarms, page)
    elif view == "maintenances":
        text, total_pages = format_maintenances_page(bot_state.active_maintenances, page)
    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        total_pages = None

    markup = create_refresh_keyboard(current_page=page, total_pages=total_pages)
    await call.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
    await call.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


@router.callback_query(F.data == "close_selection")
async def close_selection(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚ùå –ó–∞–∫—Ä—ã—Ç—å¬ª")
    try:
        await call.message.delete()
        logger.debug(f"[{user_id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await call.answer("üö´ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")


# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    action = call.data.split("_")[1]  # next –∏–ª–∏ prev
    data = await state.get_data()
    current_page = data.get("page", 0)
    view = data.get("view", "alarms")
    total_pages = data.get("total_pages", 0)

    if action == "next" and current_page < total_pages - 1:
        new_page = current_page + 1
    elif action == "prev" and current_page > 0:
        new_page = current_page - 1
    else:
        new_page = current_page

    await state.update_data(page=new_page)
    logger.info(f"[{user_id}] –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {new_page} –¥–ª—è {view}")

    if view == "alarms":
        text, _ = format_alarms_page(bot_state.active_alarms, new_page)
    elif view == "maintenances":
        text, _ = format_maintenances_page(bot_state.active_maintenances, new_page)
    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"

    markup = create_refresh_keyboard(current_page=new_page, total_pages=total_pages)
    await call.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
    await call.answer()