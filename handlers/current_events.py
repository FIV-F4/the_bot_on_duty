# handlers/current_events.py
import logging
from aiogram.filters import Command
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot_state import bot_state  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotState
from keyboards import create_event_list_keyboard

logger = logging.getLogger(__name__)
router = Router()


def create_refresh_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_selection"),
        InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_selection")
    )
    return builder.as_markup()


@router.message(Command("alarm_list"))
@router.message(F.text == "üìï –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def show_current_events(message: Message):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö® –°–±–æ–∏", callback_data="show_alarms")],
        [InlineKeyboardButton(text="üîß –†–∞–±–æ—Ç—ã", callback_data="show_maintenances")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_selection")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=keyboard)


@router.callback_query(lambda call: call.data in ["show_alarms", "show_maintenances"])
async def handle_list_callback(call: CallbackQuery):
    user_id = call.from_user.id
    choice = call.data
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä: {choice}")

    if choice == "show_alarms":
        if not bot_state.active_alarms:
            logger.warning(f"[{user_id}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ–µ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            await call.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—ë–≤", show_alert=True)
            return

        alarm_text = "<b>üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ–∏:</b>\n\n"
        for alarm_id, alarm_info in bot_state.active_alarms.items():
            try:
                fix_time = alarm_info["fix_time"].strftime("%d.%m.%Y %H:%M")
            except Exception as e:
                logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—è {alarm_id}: {e}")
                fix_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            author = alarm_info.get("user_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            logger.debug(f"[{user_id}] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—è: {alarm_id}, –∏—Å–ø—Ä–∞–≤–∏–º –¥–æ: {fix_time}, –∞–≤—Ç–æ—Ä: {author}")
            alarm_text += f"‚Ä¢ ID: <code>{alarm_id}</code>, –∏—Å–ø—Ä–∞–≤–∏–º –¥–æ {fix_time}, –∞–≤—Ç–æ—Ä: {author}\n"

        try:
            await call.message.edit_text(alarm_text, parse_mode="HTML", reply_markup=create_refresh_keyboard())
        except Exception as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–±–æ–∏): {e}")
            await call.message.answer(alarm_text, parse_mode="HTML", reply_markup=create_refresh_keyboard())

        await call.answer()

    elif choice == "show_maintenances":
        if not bot_state.active_maintenances:
            logger.warning(f"[{user_id}] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            await call.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç", show_alert=True)
            return

        maint_text = "<b>üîß –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b>\n\n"
        for work_id, work_info in bot_state.active_maintenances.items():
            try:
                start_time = work_info["start_time"].strftime("%d.%m.%Y %H:%M")
                end_time = work_info["end_time"].strftime("%d.%m.%Y %H:%M")
            except Exception as e:
                logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã {work_id}: {e}")
                start_time = end_time = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            maint_text += f"‚Ä¢ ID: <code>{work_id}</code>, –Ω–∞—á–∞–ª–æ: {start_time}, –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}\n"
            logger.debug(f"[{user_id}] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: {work_id}, –Ω–∞—á–∞–ª–æ: {start_time}, –æ–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}")

        try:
            await call.message.edit_text(maint_text, parse_mode="HTML", reply_markup=create_refresh_keyboard())
        except Exception as e:
            logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–±–æ—Ç—ã): {e}")
            await call.message.answer(maint_text, parse_mode="HTML", reply_markup=create_refresh_keyboard())

        await call.answer()
    else:
        logger.warning(f"[{user_id}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {choice}")
        await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)


@router.callback_query(F.data == "refresh_selection")
async def refresh_selection(call: CallbackQuery):
    user_id = call.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üîÑ –û–±–Ω–æ–≤–∏—Ç—å¬ª")
    await call.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫...", show_alert=False)

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    await show_current_events(call.message)
    logger.info(f"[{user_id}] –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω")
    await call.answer()


@router.callback_query(F.data == "close_selection")
async def close_selection(call: CallbackQuery):
    user_id = call.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚ùå –ó–∞–∫—Ä—ã—Ç—å¬ª")

    try:
        await call.message.delete()
        logger.debug(f"[{user_id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.warning(f"[{user_id}] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await call.answer("üö´ –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")

