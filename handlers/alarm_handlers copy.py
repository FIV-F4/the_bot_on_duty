# handlers/alarm_handlers.py
import re
import logging
import uuid
from datetime import datetime as dt, timedelta
from typing import Optional
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton, InlineKeyboardBuilder
from aiogram import Bot

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from keyboards import create_cancel_keyboard, create_main_keyboard, create_message_type_keyboard, \
    create_confirmation_keyboard, create_level_keyboard, create_service_keyboard
from utils.helpers import NewMessageStates, parse_duration, get_user_name, is_admin
from bot_state import bot_state
from config import CONFIG, PROBLEM_LEVELS, PROBLEM_SERVICES, INFLUENCE_OPTIONS
from utils.create_jira_fa import create_failure_issue

logger = logging.getLogger(__name__)
router = Router()

DATETIME_FORMAT = "%d.%m.%Y %H:%M"

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class NewMessageStates(StatesGroup):
    SELECTING_TYPE = State()
    ENTER_TITLE = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    ENTER_DESCRIPTION = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
    ENTER_LEVEL = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–ª–µ–º—ã
    ENTER_SERVICE = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
    ENTER_FIX_TIME = State()
    ENTER_START_TIME = State()
    ENTER_END_TIME = State()
    ENTER_UNAVAILABLE_SERVICES = State()
    ENTER_MESSAGE_TEXT = State()
    CONFIRMATION = State()


@router.message(Command("new_message"))
@router.message(F.text == "üì¢ –°–æ–æ–±—â–∏—Ç—å")
async def new_message_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

    if not is_admin(user_id):
        logger.warning(f"[{user_id}] –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode='HTML')
        return

    await state.clear()
    logger.info(f"[{user_id}] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=create_message_type_keyboard())
    await state.set_state(NewMessageStates.SELECTING_TYPE)


@router.callback_query(F.data.startswith("message_type_"))
async def handle_message_type(call: CallbackQuery, state: FSMContext):
    msg_type = call.data.split("_")[-1]  # 'alarm', 'maintenance', 'regular'
    logger.info(f"[{call.from_user.id}] –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")

    if msg_type == "alarm":
        await state.set_state(NewMessageStates.ENTER_TITLE)
        await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=create_cancel_keyboard())
    elif msg_type == "maintenance":
        await state.set_state(NewMessageStates.ENTER_TITLE)
        await call.message.answer("üîß –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–±–æ—Ç:", reply_markup=create_cancel_keyboard())
    elif msg_type == "regular":
        await state.set_state(NewMessageStates.ENTER_MESSAGE_TEXT)
        await call.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=create_cancel_keyboard())

    await state.update_data(type=msg_type)
    await call.answer()


@router.message(NewMessageStates.ENTER_TITLE)
async def enter_title(message: Message, state: FSMContext):
    title = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title[:30]}...")

    if title == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    await state.update_data(title=title)
    await state.set_state(NewMessageStates.ENTER_DESCRIPTION)
    await message.answer("‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:", reply_markup=create_cancel_keyboard())


@router.message(NewMessageStates.ENTER_DESCRIPTION)
async def enter_description(message: Message, state: FSMContext):
    description = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {description[:30]}...")

    if description == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    await state.update_data(description=description)
    data = await state.get_data()

    if data["type"] == "alarm":
        await state.set_state(NewMessageStates.ENTER_LEVEL)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=create_level_keyboard())
    elif data["type"] == "maintenance":
        logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç")
        await message.answer(
            "‚åõ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´27.05.2025 16:00¬ª",
            reply_markup=create_cancel_keyboard()
        )
        await state.set_state(NewMessageStates.ENTER_START_TIME)


@router.callback_query(F.data.startswith("lvl_"))
async def process_level(callback: CallbackQuery, state: FSMContext):
    level_index = int(callback.data.replace("lvl_", ""))
    level = PROBLEM_LEVELS[level_index]
    await state.update_data(level=level)
    await state.set_state(NewMessageStates.ENTER_SERVICE)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å:",
        reply_markup=create_service_keyboard()
    )


@router.callback_query(F.data.startswith("svc_"))
async def process_service(callback: CallbackQuery, state: FSMContext):
    service_index = int(callback.data.replace("svc_", ""))
    service = PROBLEM_SERVICES[service_index]
    await state.update_data(service=service)
    await state.set_state(NewMessageStates.ENTER_FIX_TIME)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´15:00¬ª, ¬´—á–µ—Ä–µ–∑ 1 —á–∞—Å¬ª",
        reply_markup=builder.as_markup()
    )


@router.message(NewMessageStates.ENTER_FIX_TIME)
async def enter_fix_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    user_id = message.from_user.id
    now = dt.now()
    logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {time_str}")

    if time_str == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ ENTER_FIX_TIME")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    try:
        fix_time = None
        if re.search(r"\d{1,2}:\d{2}", time_str):
            hour, minute = map(int, time_str.split(":"))
            fix_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if fix_time < now:
                fix_time += timedelta(days=1)
        elif "—á–µ—Ä–µ–∑" in time_str.lower():
            duration = parse_duration(time_str)
            if not duration:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            fix_time = now + duration
        else:
            duration = parse_duration(time_str)
            if not duration:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            fix_time = now + duration

        await state.update_data(fix_time=fix_time.isoformat())
        logger.debug(f"[{user_id}] –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fix_time.isoformat()}")

        data = await state.get_data()
        title = data["title"]
        description = data["description"]
        level = data["level"]
        service = data["service"]
        preview_text = (
            "üìÑ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n"
            f"üö® <b>–°–±–æ–π</b>\n"
            f"‚Ä¢ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n"
            f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"‚Ä¢ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
            f"‚Ä¢ <b>–°–µ—Ä–≤–∏—Å:</b> {service}\n"
            f"‚Ä¢ <b>–ò—Å–ø—Ä–∞–≤–∏–º –¥–æ:</b> {fix_time.strftime(DATETIME_FORMAT)}"
        )

        await state.update_data(preview_text=preview_text)
        await message.answer(preview_text, parse_mode='HTML', reply_markup=create_confirmation_keyboard())
        await state.set_state(NewMessageStates.CONFIRMATION)

    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–±–æ—è: {str(e)}", exc_info=True)
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´15:00¬ª ‚Äî —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ –ò–ª–∏: ¬´—á–µ—Ä–µ–∑ 1 —á–∞—Å¬ª ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
            reply_markup=create_cancel_keyboard()
        )


@router.message(NewMessageStates.ENTER_START_TIME)
async def enter_start_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_str}")

    if time_str == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ ENTER_START_TIME")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    try:
        start_time = dt.strptime(time_str, DATETIME_FORMAT)
        await state.update_data(start_time=start_time.isoformat())
        logger.debug(f"[{user_id}] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {start_time.isoformat()}")

        await message.answer(
            "‚åõ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´27.05.2025 16:00¬ª",
            reply_markup=create_cancel_keyboard()
        )
        await state.set_state(NewMessageStates.ENTER_END_TIME)

    except ValueError as e:
        logger.warning(f"[{user_id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: ¬´27.05.2025 14:00¬ª",
            reply_markup=create_cancel_keyboard()
        )


@router.message(NewMessageStates.ENTER_END_TIME)
async def enter_end_time(message: Message, state: FSMContext):
    time_str = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time_str}")

    if time_str == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ ENTER_END_TIME")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    try:
        data = await state.get_data()
        start_time = dt.fromisoformat(data["start_time"])
        end_time = dt.strptime(time_str, DATETIME_FORMAT)

        if end_time < start_time:
            raise ValueError("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞")

        await state.update_data(end_time=end_time.isoformat())
        logger.debug(f"[{user_id}] –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {end_time.isoformat()}")
        await message.answer(
            "üîå –ß—Ç–æ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç?",
            reply_markup=create_cancel_keyboard()
        )
        await state.set_state(NewMessageStates.ENTER_UNAVAILABLE_SERVICES)

    except ValueError as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer(
            "‚è∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: ¬´–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º¬ª\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: ¬´27.05.2025 16:00¬ª",
            reply_markup=create_cancel_keyboard()
        )


@router.message(NewMessageStates.ENTER_UNAVAILABLE_SERVICES)
async def enter_unavailable_services(message: Message, state: FSMContext):
    services = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {services[:30]}...")

    if services == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ ENTER_UNAVAILABLE_SERVICES")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    await state.update_data(unavailable_services=services)
    data = await state.get_data()
    title = data["title"]
    description = data["description"]
    start_time = dt.fromisoformat(data["start_time"])
    end_time = dt.fromisoformat(data["end_time"])

    preview_text = (
        "üìÑ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n"
        f"üîß <b>–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b>\n"
        f"‚Ä¢ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n"
        f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        f"‚Ä¢ <b>–ù–∞—á–∞–ª–æ:</b> {start_time.strftime(DATETIME_FORMAT)}\n"
        f"‚Ä¢ <b>–ö–æ–Ω–µ—Ü:</b> {end_time.strftime(DATETIME_FORMAT)}\n"
        f"‚Ä¢ <b>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ:</b> {services}"
    )

    await state.update_data(preview_text=preview_text)
    await message.answer(preview_text, parse_mode='HTML', reply_markup=create_confirmation_keyboard())
    await state.set_state(NewMessageStates.CONFIRMATION)


@router.message(NewMessageStates.ENTER_MESSAGE_TEXT)
async def enter_message_text(message: Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –í–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text[:30]}...")

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ ENTER_MESSAGE_TEXT")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    await state.update_data(message_text=text)
    logger.debug(f"[{user_id}] –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {text[:50]}...")
    await message.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É", reply_markup=create_confirmation_keyboard())
    await state.set_state(NewMessageStates.CONFIRMATION)


@router.message(NewMessageStates.CONFIRMATION)
async def confirm_send(message: Message, state: FSMContext):
    response = message.text.strip()
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {response}")

    if response == "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å":
        logger.info(f"[{user_id}] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=create_main_keyboard())
        return

    elif response == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        data = await message.bot.get_me()
        bot_username = data.username
        username = await get_user_name(user_id, message.bot)
        data = await state.get_data()
        msg_type = data["type"]

        try:
            if msg_type == "alarm":
                issue = data["title"]
                fix_time = dt.fromisoformat(data["fix_time"])
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Jira
                try:
                    jira_response = create_failure_issue(
                        summary=issue,
                        description=data["description"],
                        problem_level="–ü–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤ –±—É–¥—É—â–µ–º
                        problem_service="–î—Ä—É–≥–æ–µ",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ –≤ –±—É–¥—É—â–µ–º
                        time_start_problem=dt.now().strftime("%Y-%m-%d %H:%M"),
                        influence="–ö–ª–∏–µ–Ω—Ç—ã"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –≤–ª–∏—è–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
                    )
                    
                    if jira_response and 'key' in jira_response:
                        alarm_id = jira_response['key']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ Jira
                        jira_url = f"https://jira.petrovich.tech/browse/{alarm_id}"
                        logger.info(f"[{user_id}] –ó–∞–¥–∞—á–∞ –≤ Jira —Å–æ–∑–¥–∞–Ω–∞: {alarm_id}")
                    else:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–¥–∞—á–∏ –∏–∑ Jira")
                        
                except Exception as jira_error:
                    logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Jira: {str(jira_error)}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤ Jira, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
                    alarm_id = str(uuid.uuid4())[:4]
                    jira_url = None
                    logger.info(f"[{user_id}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID: {alarm_id}")

                bot_state.active_alarms[alarm_id] = {
                    "issue": issue,
                    "fix_time": fix_time,
                    "user_id": user_id,
                    "created_at": dt.now().isoformat()
                }

                # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                base_text = (
                    f"üö® <b>–°–±–æ–π</b>\n"
                    f"‚Ä¢ <b>ID:</b> <code>{alarm_id}</code>\n"
                    f"‚Ä¢ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
                    f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
                    f"‚Ä¢ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {data['level']}\n"
                    f"‚Ä¢ <b>–°–µ—Ä–≤–∏—Å:</b> {data['service']}\n"
                    f"‚Ä¢ <b>–ò—Å–ø—Ä–∞–≤–∏–º –¥–æ:</b> {fix_time.strftime(DATETIME_FORMAT)}\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ—Ä:</b> {username}\n"
                    f"‚Ä¢ <i>–ò–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º!</i>"
                )

                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ (–±–µ–∑ ID, –∞–≤—Ç–æ—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è)
                chat_message = (
                    f"üö® <b>–°–±–æ–π</b>\n"
                    f"‚Ä¢ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
                    f"‚Ä¢ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {data['level']}\n"
                    f"‚Ä¢ <b>–°–µ—Ä–≤–∏—Å:</b> {data['service']}\n"
                    f"‚Ä¢ <b>–ò—Å–ø—Ä–∞–≤–∏–º –¥–æ:</b> {fix_time.strftime(DATETIME_FORMAT)}\n"
                    f"‚Ä¢ <i>–ò–Ω–∂–µ–Ω–µ—Ä—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º!</i>"
                )
                await message.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], chat_message, parse_mode='HTML')

                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã (—Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Jira, –µ—Å–ª–∏ –µ—Å—Ç—å)
                topic_message = base_text
                if jira_url:
                    topic_message += f"\n‚Ä¢ <b>–ó–∞–¥–∞—á–∞ –≤ Jira:</b> <a href='{jira_url}'>{alarm_id}</a>"

                scm_channel_id = CONFIG["TELEGRAM"].get("SCM_CHANNEL_ID")
                if scm_channel_id:
                    topic = await message.bot.create_forum_topic(chat_id=scm_channel_id, name=f"{alarm_id} {data['title'][:20]}...")
                    await message.bot.send_message(
                        chat_id=scm_channel_id,
                        message_thread_id=topic.message_thread_id,
                        text=topic_message,
                        parse_mode='HTML'
                    )
                    logger.info(f"[{user_id}] –¢–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {topic.message_thread_id}")

                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_message = f"‚úÖ –°–±–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ID: <code>{alarm_id}</code>"
                if jira_url:
                    user_message += f"\nüîó <a href='{jira_url}'>–ó–∞–¥–∞—á–∞ –≤ Jira</a>"

                logger.info(f"[{user_id}] –°–±–æ–π {alarm_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                await message.answer(
                    user_message,
                    parse_mode='HTML',
                    reply_markup=create_main_keyboard()
                )
                await bot_state.save_state()
                await state.clear()

            elif msg_type == "maintenance":
                work_id = str(uuid.uuid4())[:4]
                description = data["description"]
                start_time = dt.fromisoformat(data["start_time"])
                end_time = dt.fromisoformat(data["end_time"])
                unavailable_services = data.get("unavailable_services", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

                bot_state.active_maintenances[work_id] = {
                    "description": description,
                    "start_time": start_time,
                    "end_time": end_time,
                    "unavailable_services": unavailable_services,
                    "user_id": user_id,
                    "created_at": dt.now().isoformat()
                }

                maint_text = (
                    f"üîß <b>–†–µ–≥–ª–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</b>\n"
                    f"‚Ä¢ <b>ID:</b> <code>{work_id}</code>\n"
                    f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                    f"‚Ä¢ <b>–ù–∞—á–∞–ª–æ:</b> {start_time.strftime(DATETIME_FORMAT)}\n"
                    f"‚Ä¢ <b>–ö–æ–Ω–µ—Ü:</b> {end_time.strftime(DATETIME_FORMAT)}\n"
                    f"‚Ä¢ <b>–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ:</b> {unavailable_services}\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ—Ä:</b> {username}"
                )

                await message.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], maint_text, parse_mode='HTML')
                logger.info(f"[{user_id}] –†–∞–±–æ—Ç–∞ {work_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

                await message.answer(
                    f"‚úÖ –†–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ID: <code>{work_id}</code>",
                    parse_mode='HTML',
                    reply_markup=create_main_keyboard()
                )
                await bot_state.save_state()
                await state.clear()

            elif msg_type == "regular":
                message_text = data["message_text"]
                regular_text = (
                    f"üí¨ <b>–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                    f"{message_text}\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ—Ä:</b> {username}"
                )

                await message.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], regular_text, parse_mode='HTML')
                logger.info(f"[{user_id}] –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")

                await message.answer(
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    reply_markup=create_main_keyboard()
                )
                await bot_state.save_state()
                await state.clear()

            else:
                logger.warning(f"[{user_id}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=create_main_keyboard())
                await state.clear()

        except Exception as e:
            logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", exc_info=True)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=create_main_keyboard())
            await state.clear()

    else:
        logger.warning(f"[{user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
        data = await state.get_data()
        preview_text = data.get("preview_text", "")
        if preview_text:
            await message.answer(preview_text, parse_mode='HTML', reply_markup=create_confirmation_keyboard())
        else:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –∏–ª–∏ ¬´–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å¬ª",
                reply_markup=create_confirmation_keyboard()
            )