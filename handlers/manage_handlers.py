# manage_handlers.py
import logging
from datetime import datetime, timedelta
import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

from bot_state import bot_state
from keyboards import (
    create_stop_type_keyboard,
    create_action_keyboard,
    create_alarm_selection_keyboard,
    create_maintenance_selection_keyboard,
    create_extension_time_keyboard,
    create_reminder_keyboard
)
from utils.helpers import is_admin, is_superadmin, get_user_name
from config import CONFIG

logger = logging.getLogger(__name__)
router = Router()


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class StopStates(StatesGroup):
    SELECT_TYPE = State()           # –í—ã–±–æ—Ä —Ç–∏–ø–∞ (–°–±–æ–π / –†–∞–±–æ—Ç–∞)
    SELECT_ACTION = State()         # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å / –ü—Ä–æ–¥–ª–∏—Ç—å
    SELECT_ALARM_DURATION = State() # –í—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–±–æ—è
    ENTER_MAINTENANCE_END = State() # –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    SELECT_ITEM = State()           # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è


class ReminderStates(StatesGroup):
    WAITING_FOR_EXTENSION = State()


# --- –ö–æ–º–∞–Ω–¥–∞ /manage –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üõÇ –£–ø—Ä–∞–≤–ª—è—Ç—å" ---
@router.message(Command("manage"))
@router.message(F.text == "üõÇ –£–ø—Ä–∞–≤–ª—è—Ç—å")
async def stop_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", exc_info=True)

    if not is_admin(user_id):
        logger.warning(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", parse_mode=ParseMode.HTML)
        return

    await state.clear()
    logger.info(f"[{user_id}] –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:", reply_markup=create_stop_type_keyboard())
    await state.set_state(StopStates.SELECT_TYPE)
    logger.info(f"[{user_id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECT_TYPE")


# --- –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è (–°–±–æ–π / –†–∞–±–æ—Ç–∞) ---
@router.message(StopStates.SELECT_TYPE)
async def select_event_type(message: Message, state: FSMContext):
    user_id = message.from_user.id
    choice = message.text.strip()
    logger.info(f"[{user_id}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {choice}")

    if choice == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info(f"[{user_id}] –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
        return

    elif choice == "üö® –°–±–æ–π üö®":
        user_alarms = bot_state.get_user_active_alarms(user_id)
        logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        if not user_alarms and not is_superadmin(user_id):
            logger.warning(f"[{user_id}] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ–µ–≤")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ–µ–≤", reply_markup=None)
            return

        keyboard = create_alarm_selection_keyboard(user_alarms)
        await state.update_data(type="alarm")
        logger.info(f"[{user_id}] –ü–æ–∫–∞–∑–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ–∏")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ–π:", reply_markup=keyboard)
        await state.set_state(StopStates.SELECT_ITEM)
        logger.info(f"[{user_id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECT_ITEM")

    elif choice == "üîß –†–∞–±–æ—Ç–∞ üîß":
        active_works = bot_state.active_maintenances
        works_by_author = {
            wid: work for wid, work in active_works.items()
            if work["user_id"] == user_id or is_superadmin(user_id)
        }

        if not works_by_author:
            logger.warning(f"[{user_id}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç", reply_markup=None)
            return

        keyboard = create_maintenance_selection_keyboard(works_by_author)
        await state.update_data(type="maintenance")
        logger.info(f"[{user_id}] –ü–æ–∫–∞–∑–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:", reply_markup=keyboard)
        await state.set_state(StopStates.SELECT_ITEM)
        logger.info(f"[{user_id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECT_ITEM")

    else:
        logger.warning(f"[{user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä: {choice}")
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", reply_markup=create_stop_type_keyboard())


# --- –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ---
@router.callback_query(lambda call: call.data.startswith("select_"))
async def select_action(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    raw_data = call.data[7:]  # select_alarm_abc123 ‚Üí alarm_abc123
    logger.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω callback: {call.data}")

    try:
        parts = raw_data.split("_", 1)
        if len(parts) < 2:
            logger.warning(f"[{user_id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {call.data}")
            await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
            return

        data_type, item_id = parts
        logger.debug(f"[{user_id}] –¢–∏–ø: {data_type}, ID: {item_id}")

        if data_type == "alarm" and item_id not in bot_state.active_alarms:
            logger.warning(f"[{user_id}] –°–±–æ–π {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.answer("‚ùå –°–±–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        elif data_type == "maintenance" and item_id not in bot_state.active_maintenances:
            logger.warning(f"[{user_id}] –†–∞–±–æ—Ç–∞ {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await call.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        await state.update_data(data_type=data_type, item_id=item_id)
        logger.info(f"[{user_id}] –í—ã–±—Ä–∞–Ω {data_type}: {item_id}")
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_action_keyboard())
        await state.set_state(StopStates.SELECT_ACTION)
        logger.info(f"[{user_id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECT_ACTION")

    except Exception as e:
        logger.error(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {str(e)}", exc_info=True)
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", show_alert=True)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å / –ü—Ä–æ–¥–ª–∏—Ç—å ---
@router.callback_query(StopStates.SELECT_ACTION)
async def handle_action_callback(call: CallbackQuery, state: FSMContext):
    action = call.data
    data = await state.get_data()
    data_type = data['data_type']
    item_id = data['item_id']
    logger.info(f"[{call.from_user.id}] –í—ã–±—Ä–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action} –¥–ª—è {data_type}: {item_id}")

    if action == "action_stop":
        logger.info(f"[{call.from_user.id}] –ù–∞—á–∞—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {data_type}: {item_id}")

        if data_type == "alarm":
            alarm_info = bot_state.active_alarms[item_id]
            del bot_state.active_alarms[item_id]
            text = (
                f"‚úÖ <b>–°–±–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n"
                f"‚Ä¢ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {alarm_info['issue']}\n"
            )
            await call.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], text, parse_mode="HTML")
            logger.info(f"[{call.from_user.id}] –°–±–æ–π {item_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        elif data_type == "maintenance":
            maint_info = bot_state.active_maintenances[item_id]
            del bot_state.active_maintenances[item_id]
            text = (
                f"‚úÖ <b>–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n"
                f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {maint_info['description']}\n"
            )
            await call.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], text, parse_mode="HTML")
            logger.info(f"[{call.from_user.id}] –†–∞–±–æ—Ç–∞ {item_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")

        await call.message.edit_text(f"{('üö® –°–±–æ–π' if data_type == 'alarm' else 'üîß –†–∞–±–æ—Ç–∞')} {item_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω(–∞)")
        await bot_state.save_state()
        logger.info(f"[{call.from_user.id}] –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.clear()
        logger.info(f"[{call.from_user.id}] FSM –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    elif action == "action_extend":
        logger.info(f"[{call.from_user.id}] –ù–∞—á–∞—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ {data_type}: {item_id}")
        if data_type == "alarm":
            await call.message.edit_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–±–æ–π?", reply_markup=create_extension_time_keyboard())
            await state.set_state(StopStates.SELECT_ALARM_DURATION)
            logger.info(f"[{call.from_user.id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SELECT_ALARM_DURATION")
        elif data_type == "maintenance":
            await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy hh:mm")
            await state.set_state(StopStates.ENTER_MAINTENANCE_END)
            logger.info(f"[{call.from_user.id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ENTER_MAINTENANCE_END")

    await call.answer()


# --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–±–æ—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è ---
@router.callback_query(StopStates.SELECT_ALARM_DURATION)
async def handle_alarm_extension_callback(call: CallbackQuery, state: FSMContext):
    duration = call.data
    data = await state.get_data()
    item_id = data['item_id']
    logger.info(f"[{call.from_user.id}] –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–±–æ—è {item_id} –Ω–∞ {duration}")

    alarm = bot_state.active_alarms.get(item_id)
    if not alarm:
        logger.warning(f"[{call.from_user.id}] –°–±–æ–π {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await call.message.answer("‚ùå –°–±–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await call.answer()
        return

    fix_time_value = alarm.get("fix_time")
    logger.debug(f"[{item_id}] fix_time: {repr(fix_time_value)}, type: {type(fix_time_value)}")

    old_end = None
    if isinstance(fix_time_value, str):
        try:
            old_end = datetime.fromisoformat(fix_time_value)
        except ValueError:
            logger.error(f"[{call.from_user.id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —É —Å–±–æ—è {item_id}")
            await call.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            await call.answer()
            return
    elif isinstance(fix_time_value, datetime):
        old_end = fix_time_value
    else:
        logger.warning(f"[{call.from_user.id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ fix_time –¥–ª—è —Å–±–æ—è {item_id}")
        await call.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        await call.answer()
        return

    delta = None
    if duration == "extend_30_min":
        delta = timedelta(minutes=30)
        logger.info(f"[{call.from_user.id}] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: +30 –º–∏–Ω")
    elif duration == "extend_1_hour":
        delta = timedelta(hours=1)
        logger.info(f"[{call.from_user.id}] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ: +1 —á–∞—Å")
    elif duration == "extend_cancel":
        logger.info(f"[{call.from_user.id}] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await state.clear()
        await call.message.edit_text("üö´ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await call.answer()
        return
    else:
        logger.warning(f"[{call.from_user.id}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä: {duration}")
        await call.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    new_end = old_end + delta
    alarm["fix_time"] = new_end.isoformat()
    logger.info(f"[{call.from_user.id}] –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {new_end.isoformat()}")

    text = (
        f"üîÑ <b>–°–±–æ–π –ø—Ä–æ–¥–ª—ë–Ω</b>\n"
        f"‚Ä¢ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {alarm['issue']}\n"
        f"‚Ä¢ <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {new_end.strftime('%d.%m.%Y %H:%M')}\n"
    )

    await call.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], text, parse_mode="HTML")
    logger.info(f"[{call.from_user.id}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
    await call.message.edit_text(f"üïí –°–±–æ–π {item_id} –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}")
    await bot_state.save_state()
    logger.info(f"[{call.from_user.id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    await state.clear()
    logger.info(f"[{call.from_user.id}] FSM –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
    await call.answer()


# --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è ---
@router.message(StopStates.ENTER_MAINTENANCE_END)
async def handle_maintenance_new_end(message: Message, state: FSMContext):
    new_time_str = message.text.strip()
    data = await state.get_data()
    item_id = data['item_id']
    logger.info(f"[{message.from_user.id}] –í–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time_str}")

    maint = bot_state.active_maintenances.get(item_id)
    if not maint:
        logger.warning(f"[{message.from_user.id}] –†–∞–±–æ—Ç–∞ {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await message.answer("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    try:
        new_time = datetime.strptime(new_time_str, "%d.%m.%Y %H:%M")
        maint["end"] = new_time.isoformat()
        logger.info(f"[{message.from_user.id}] –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_time.isoformat()}")

        text = (
            f"üîÑ <b>–†–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞</b>\n"
            f"‚Ä¢ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {maint['description']}\n"
            f"‚Ä¢ <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {new_time.strftime('%d.%m.%Y %H:%M')}\n"
        )

        await message.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], text, parse_mode="HTML")
        logger.info(f"[{message.from_user.id}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
        await message.answer(f"üïí –†–∞–±–æ—Ç–∞ {item_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_time.strftime('%d.%m.%Y %H:%M')}")
        await bot_state.save_state()
        logger.info(f"[{message.from_user.id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.clear()
        logger.info(f"[{message.from_user.id}] FSM –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
    except ValueError:
        logger.warning(f"[{message.from_user.id}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {new_time_str}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dd.mm.yyyy hh:mm")


# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Å–±–æ—è ---
async def check_reminders(bot):
    while True:
        now = datetime.now()
        logger.info(f"[REMINDER] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.isoformat()}")
        for alarm_id, alarm in bot_state.active_alarms.copy().items():
            try:
                fix_time_value = alarm.get("fix_time")
                logger.debug(f"[REMINDER] –°–±–æ–π {alarm_id}, fix_time: {fix_time_value}")
                if isinstance(fix_time_value, str):
                    fix_time = datetime.fromisoformat(fix_time_value)
                elif isinstance(fix_time_value, datetime):
                    fix_time = fix_time_value
                else:
                    continue

                reminder_time = fix_time - timedelta(minutes=5)
                if now >= reminder_time:
                    user_id = alarm["user_id"]
                    if alarm.get("reminded", False):
                        logger.info(f"[REMINDER] –°–±–æ–π {alarm_id} —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏")
                        continue

                    alarm["reminded"] = True
                    logger.info(f"[REMINDER] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–±–æ—è {alarm_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                    try:
                        msg = await bot.send_message(
                            user_id,
                            f"‚ö†Ô∏è –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–±–æ—è {alarm_id} –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç.\n–ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å?",
                            reply_markup=create_reminder_keyboard()
                        )
                        bot_state.user_states[user_id] = {
                            "type": "reminder",
                            "alarm_id": alarm_id,
                            "chat_id": msg.chat.id,
                            "message_id": msg.message_id
                        }
                        logger.info(f"[REMINDER] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.error(f"[REMINDER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                        alarm["reminded"] = False

            except KeyError as ke:
                logger.warning(f"[REMINDER] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {ke} –≤ —Å–±–æ–µ {alarm_id}")
            except Exception as e:
                logger.error(f"[REMINDER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±–æ—è {alarm_id}: {e}", exc_info=True)

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
@router.callback_query(lambda call: call.data.startswith("reminder_"))
async def handle_reminder_action(call: CallbackQuery, state: FSMContext):
    action = call.data.split("_", 1)[1]  # ‚úÖ –í—Å–µ–≥–¥–∞ –≤–µ—Ä–Ω—ë—Ç "stop" –∏–ª–∏ "extend"
    user_id = call.from_user.id
    user_state = bot_state.user_states.get(user_id)
    logger.info(f"[{user_id}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {action}")

    if not user_state or user_state.get("type") != "reminder":
        logger.warning(f"[{user_id}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await call.answer("‚ùå –≠—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ")
        return

    alarm_id = user_state["alarm_id"]
    alarm = bot_state.active_alarms.get(alarm_id)

    if not alarm:
        logger.warning(f"[{user_id}] –°–±–æ–π {alarm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        await call.message.edit_text("‚ùå –°–±–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")
        if user_id in bot_state.user_states:
            del bot_state.user_states[user_id]
        return

    if action == "stop":
        logger.info(f"[{user_id}] –°–±–æ–π {alarm_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é")
        text = (
            f"‚úÖ <b>–°–±–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω</b>\n"
            f"‚Ä¢ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {alarm['issue']}\n"
        )
        del bot_state.active_alarms[alarm_id]
        await call.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], text, parse_mode="HTML")
        await call.message.edit_text("üö´ –°–±–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∞")
        if user_id in bot_state.user_states:
            del bot_state.user_states[user_id]
        await bot_state.save_state()
        logger.info(f"[{user_id}] –°–±–æ–π {alarm_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

    elif action == "extend":
        logger.info(f"[{user_id}] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–±–æ—è {alarm_id}")
        await call.message.edit_text("–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Å–±–æ–π?", reply_markup=create_extension_time_keyboard())
        await state.update_data(alarm_id=alarm_id)
        await state.set_state(ReminderStates.WAITING_FOR_EXTENSION)
        logger.info(f"[{user_id}] –ü–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_EXTENSION")

    await call.answer()


# --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–±–æ—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
@router.callback_query(ReminderStates.WAITING_FOR_EXTENSION)
async def handle_reminder_extension(call: CallbackQuery, state: FSMContext):
    duration = call.data
    data = await state.get_data()
    alarm_id = data["alarm_id"]
    alarm = bot_state.active_alarms.get(alarm_id)

    if not alarm:
        logger.warning(f"[{call.from_user.id}] –°–±–æ–π {alarm_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏")
        await call.message.edit_text("‚ùå –°–±–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await call.answer()
        return

    logger.info(f"[{call.from_user.id}] –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–±–æ—è {alarm_id}: {duration}")
    fix_time_value = alarm.get("fix_time")
    old_end = datetime.fromisoformat(fix_time_value) if isinstance(fix_time_value, str) else fix_time_value
    delta = timedelta(minutes=30) if duration == "extend_30_min" else timedelta(hours=1)

    new_end = old_end + delta
    alarm["fix_time"] = new_end.isoformat()
    logger.info(f"[{call.from_user.id}] –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.isoformat()}")

    text = (
        f"üîÑ <b>–°–±–æ–π –ø—Ä–æ–¥–ª—ë–Ω</b>\n"
        f"‚Ä¢ <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {alarm['issue']}\n"
        f"‚Ä¢ <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {new_end.strftime('%d.%m.%Y %H:%M')}\n"
    )

    await call.bot.send_message(CONFIG["TELEGRAM"]["ALARM_CHANNEL_ID"], text, parse_mode="HTML")
    logger.info(f"[{call.from_user.id}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
    await call.message.edit_text(f"üïí –°–±–æ–π {alarm_id} –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {new_end.strftime('%d.%m.%Y %H:%M')}")
    await bot_state.save_state()
    logger.info(f"[{call.from_user.id}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
    await state.clear()
    logger.info(f"[{call.from_user.id}] FSM –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
    await call.answer()