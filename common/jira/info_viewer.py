import asyncio
from typing import List, Dict, Any, Optional
from .config import JiraConfig
from .client import JiraApiClient
from .exceptions import JiraError
import json
import os

async def get_all_jira_fields_info(project_key: str = None, issue_type_id: str = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö JIRA –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏.
    
    Args:
        project_key: –ö–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'SCHED')
        issue_type_id: ID —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10408' –¥–ª—è '–°–µ—Ä–≤–∏—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
    """
    config = JiraConfig()
    project_key = project_key or config.JIRA_DEFAULT_PROJECT
    
    async with JiraApiClient(config) as client:
        try:
            print(f"\n=== –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–Ø–• JIRA ===")
            print(f"–ü—Ä–æ–µ–∫—Ç: {project_key}")
            print(f"–¢–∏–ø –∑–∞–¥–∞—á–∏ ID: {issue_type_id or '–í—Å–µ —Ç–∏–ø—ã'}")
            print("=" * 60)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            print("\n1. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            projects = await client.get_all_projects()
            for project in projects:
                marker = " <-- –¢–ï–ö–£–©–ò–ô" if project['key'] == project_key else ""
                print(f"   - {project['name']} (Key: {project['key']}){marker}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
            print(f"\n2. –í—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:")
            issue_types = await client.get_issue_types()
            for issue_type in issue_types:
                marker = " <-- –í–´–ë–†–ê–ù–ù–´–ô" if str(issue_type['id']) == str(issue_type_id) else ""
                print(f"   - {issue_type['name']} (ID: {issue_type['id']}){marker}")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
            print(f"\n3. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_key}':")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            expand_params = "projects.issuetypes.fields"
            metadata = await client.get_create_issue_metadata(
                project_key=project_key,
                issue_type_id=issue_type_id,
                expand=expand_params
            )
            
            if not metadata.get("projects"):
                print(f"‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç
            for project_meta in metadata["projects"]:
                if project_meta['key'] != project_key:
                    continue
                    
                print(f"\n   –ü—Ä–æ–µ–∫—Ç: {project_meta['name']} ({project_meta['key']})")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏
                for issuetype_meta in project_meta.get("issuetypes", []):
                    type_marker = " <-- –í–´–ë–†–ê–ù–ù–´–ô –¢–ò–ü" if str(issuetype_meta['id']) == str(issue_type_id) else ""
                    print(f"\n   –¢–∏–ø –∑–∞–¥–∞—á–∏: {issuetype_meta['name']} (ID: {issuetype_meta['id']}){type_marker}")
                    
                    fields = issuetype_meta.get('fields', {})
                    if not fields:
                        print("     ‚ùå –ü–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏.")
                        continue
                    
                    print(f"     –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(fields)}")
                    print("     " + "=" * 50)
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    required_fields = {}
                    optional_fields = {}
                    
                    for field_id, field_info in fields.items():
                        if field_info.get("required", False):
                            required_fields[field_id] = field_info
                        else:
                            optional_fields[field_id] = field_info
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    print(f"\n     üìã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø ({len(required_fields)}):")
                    for field_id, field_info in required_fields.items():
                        await _print_field_info(field_id, field_info, indent="       ")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
                    print(f"\n     üìù –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {len(optional_fields)}):")
                    for i, (field_id, field_info) in enumerate(optional_fields.items()):
                        if i >= 10:
                            print(f"       ... –∏ –µ—â–µ {len(optional_fields) - 10} –ø–æ–ª–µ–π")
                            break
                        await _print_field_info(field_id, field_info, indent="       ")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
                    await _save_fields_to_file(project_key, issuetype_meta['name'], fields)
                    
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def _print_field_info(field_id: str, field_info: Dict[str, Any], indent: str = ""):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    name = field_info.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    field_type = field_info.get('schema', {}).get('type', 'unknown')
    required = "üî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û" if field_info.get('required') else "‚ö™ –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
    
    print(f"{indent}‚Ä¢ {name} (ID: {field_id})")
    print(f"{indent}  –¢–∏–ø: {field_type} | {required}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    allowed_values = field_info.get('allowedValues')
    if allowed_values:
        print(f"{indent}  –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for value in allowed_values[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            value_name = value.get('name', value.get('value', str(value)))
            value_id = value.get('id', '')
            print(f"{indent}    - {value_name} (ID: {value_id})")
        if len(allowed_values) > 5:
            print(f"{indent}    ... –∏ –µ—â–µ {len(allowed_values) - 5} –∑–Ω–∞—á–µ–Ω–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_value = field_info.get('defaultValue')
    if default_value:
        default_name = default_value.get('name', default_value.get('value', str(default_value)))
        print(f"{indent}  –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_name}")
    
    print()

async def _save_fields_to_file(project_key: str, issue_type_name: str, fields: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—è—Ö –≤ JSON —Ñ–∞–π–ª."""
    filename = f"jira_fields_{project_key}_{issue_type_name.replace(' ', '_')}.json"
    filepath = os.path.join(os.path.dirname(__file__), filename)
    
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(fields, f, indent=2, ensure_ascii=False)
        print(f"     üíæ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filename}")
    except Exception as e:
        print(f"     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

async def view_jira_info():
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö JIRA –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ SCHED –∏ —Ç–∏–ø–∞ "–°–µ—Ä–≤–∏—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
    await get_all_jira_fields_info(project_key="SCHED", issue_type_id="10408")

async def view_specific_field_info(field_id: str, project_key: str = "SCHED", issue_type_id: str = "10408"):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª–µ."""
    config = JiraConfig()
    
    async with JiraApiClient(config) as client:
        try:
            metadata = await client.get_create_issue_metadata(
                project_key=project_key,
                issue_type_id=issue_type_id,
                expand="projects.issuetypes.fields"
            )
            
            for project_meta in metadata.get("projects", []):
                if project_meta['key'] != project_key:
                    continue
                    
                for issuetype_meta in project_meta.get("issuetypes", []):
                    if str(issuetype_meta['id']) != str(issue_type_id):
                        continue
                    
                    fields = issuetype_meta.get('fields', {})
                    field_info = fields.get(field_id)
                    
                    if field_info:
                        print(f"\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–ï {field_id} ===")
                        await _print_field_info(field_id, field_info)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        print("–ü–æ–ª–Ω–∞—è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                        print(json.dumps(field_info, indent=2, ensure_ascii=False))
                    else:
                        print(f"‚ùå –ü–æ–ª–µ '{field_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª–µ
        field_id = sys.argv[1]
        project_key = sys.argv[2] if len(sys.argv) > 2 else "SCHED"
        issue_type_id = sys.argv[3] if len(sys.argv) > 3 else "10408"
        
        print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–µ: {field_id}")
        asyncio.run(view_specific_field_info(field_id, project_key, issue_type_id))
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        asyncio.run(view_jira_info()) 