"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞ SCHED –≤ JIRA.
"""
import asyncio
import os
from dotenv import load_dotenv
from typing import List, Dict, Any
from common.jira.config import JiraConfig
from common.jira.client import JiraApiClient
from common.jira.exceptions import JiraError
import json

async def view_sched_info():
    """–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—è—Ö –ø—Ä–æ–µ–∫—Ç–∞ SCHED –≤ JIRA."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not os.getenv("JIRA_URL") or not os.getenv("JIRA_API_TOKEN"):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è JIRA_URL –∏–ª–∏ JIRA_API_TOKEN")
        return
    
    config = JiraConfig(
        JIRA_URL=os.getenv("JIRA_URL"),
        JIRA_API_TOKEN=os.getenv("JIRA_API_TOKEN"),
        JIRA_DEFAULT_PROJECT="SCHED"
    )
    
    async with JiraApiClient(config) as client:
        print("\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï SCHED ===")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        print("\n--- –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã JIRA ---")
        try:
            projects = await client.get_all_projects()
            for project in projects:
                if project['key'] == 'SCHED':
                    print(f"‚úÖ {project['name']} (Key: {project['key']}) - –ù–ê–ô–î–ï–ù")
                else:
                    print(f"- {project['name']} (Key: {project['key']})")
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á
        print(f"\n--- –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á ---")
        try:
            issue_types = await client.get_issue_types()
            service_request_found = False
            for issue_type in issue_types:
                if issue_type['id'] == '10408':
                    print(f"‚úÖ {issue_type['name']} (ID: {issue_type['id']}) - –°–ï–†–í–ò–°–ù–´–ô –ó–ê–ü–†–û–°")
                    service_request_found = True
                else:
                    print(f"- {issue_type['name']} (ID: {issue_type['id']})")
            
            if not service_request_found:
                print("‚ùå –¢–∏–ø –∑–∞–¥–∞—á–∏ —Å ID '10408' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {e}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        print(f"\n--- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø '–°–ï–†–í–ò–°–ù–´–ô –ó–ê–ü–†–û–°' –í –ü–†–û–ï–ö–¢–ï SCHED ---")
        service_request_issue_type_id = "10408"

        try:
            metadata = await client.get_create_issue_metadata(
                project_key="SCHED",
                issue_type_id=service_request_issue_type_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª 'sched_metadata.json'...")
            with open('sched_metadata.json', 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'sched_metadata.json'")
            
            print(f"\n[DEBUG] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:")
            print(f"–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(metadata.keys())}")
            
            projects_meta = metadata.get("projects", [])
            if projects_meta:
                print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {len(projects_meta)}")
                
                for project_meta in projects_meta:
                    if project_meta['key'] == "SCHED":
                        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç SCHED –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                        print(f"–ö–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞: {list(project_meta.keys())}")
                        
                        issuetypes = project_meta.get("issuetypes", [])
                        print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {len(issuetypes)}")
                        
                        for issuetype_meta in issuetypes:
                            if issuetype_meta['id'] == service_request_issue_type_id:
                                print(f"\nüìã –¢–∏–ø –∑–∞–¥–∞—á–∏: {issuetype_meta['name']}")
                                print(f"üîß ID: {issuetype_meta['id']}")
                                print(f"–ö–ª—é—á–∏ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏: {list(issuetype_meta.keys())}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è 'fields'
                                if 'fields' in issuetype_meta:
                                    fields = issuetype_meta['fields']
                                    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(fields)}")
                                    
                                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                                    print(f"\nüî¥ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:")
                                    required_fields = []
                                    for field_name, field_info in fields.items():
                                        if field_info.get("required"):
                                            required_fields.append((field_name, field_info))
                                            print(f"  ‚Ä¢ {field_name}")
                                            print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {field_info['name']}")
                                            print(f"    –¢–∏–ø: {field_info.get('schema', {}).get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                            
                                            # –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                            if 'allowedValues' in field_info:
                                                values = []
                                                for val in field_info['allowedValues']:
                                                    if isinstance(val, dict):
                                                        values.append(val.get('value', val.get('name', str(val))))
                                                    else:
                                                        values.append(str(val))
                                                print(f"    –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {values}")
                                            
                                            # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                            if 'defaultValue' in field_info:
                                                print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {field_info['defaultValue']}")
                                            
                                            print()
                                    
                                    # –í—Å–µ –ø–æ–ª—è
                                    print(f"\nüìù –í–°–ï –ü–û–õ–Ø:")
                                    for field_name, field_info in fields.items():
                                        required = " üî¥" if field_info.get("required") else ""
                                        print(f"  ‚Ä¢ {field_name}{required}")
                                        print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {field_info['name']}")
                                        print(f"    –¢–∏–ø: {field_info.get('schema', {}).get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                        print()
                                else:
                                    print(f"‚ùå –ü–æ–ª–µ 'fields' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏")
                                    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(issuetype_meta.keys())}")
                                
                                break
                        else:
                            print(f"‚ùå –¢–∏–ø –∑–∞–¥–∞—á–∏ —Å ID '{service_request_issue_type_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ SCHED")
                        break
                else:
                    print(f"‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ SCHED –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")

if __name__ == "__main__":
    asyncio.run(view_sched_info()) 