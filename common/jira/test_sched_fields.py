"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ SCHED –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π.
"""
import asyncio
import os
from dotenv import load_dotenv
from common.jira.config import JiraConfig
from common.jira.client import JiraApiClient
from common.jira.exceptions import JiraError
import json

async def test_sched_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ SCHED –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not os.getenv("JIRA_URL") or not os.getenv("JIRA_API_TOKEN"):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è JIRA_URL –∏–ª–∏ JIRA_API_TOKEN")
        return
    
    config = JiraConfig(
        JIRA_URL=os.getenv("JIRA_URL"),
        JIRA_API_TOKEN=os.getenv("JIRA_API_TOKEN"),
        JIRA_DEFAULT_PROJECT="SCHED"
    )
    
    async with JiraApiClient(config) as client:
        print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò –í SCHED ===")
        
        # –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        print("\n--- –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è ---")
        try:
            minimal_data = {
                "fields": {
                    "project": {"key": "SCHED"},
                    "issuetype": {"id": "10408"},
                    "summary": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è"
                }
            }
            
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
            print(json.dumps(minimal_data, indent=2, ensure_ascii=False))
            
            result = await client.create_issue(minimal_data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {result.get('key')}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
            print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            error_text = str(e)
            if "required" in error_text.lower():
                print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ - –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:")
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö –∏–∑ –æ—à–∏–±–∫–∏
                print(error_text)
        
        # –¢–µ—Å—Ç 2: –° –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        print("\n--- –¢–µ—Å—Ç 2: –° –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º ---")
        try:
            full_data = {
                "fields": {
                    "project": {"key": "SCHED"},
                    "issuetype": {"id": "10408"},
                    "summary": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ø–æ–ª–Ω—ã–µ –ø–æ–ª—è",
                    "description": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π"
                }
            }
            
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
            print(json.dumps(full_data, indent=2, ensure_ascii=False))
            
            result = await client.create_issue(full_data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {result.get('key')}")
            
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: {e}")
        
        # –¢–µ—Å—Ç 3: –° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        print("\n--- –¢–µ—Å—Ç 3: –° –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ---")
        try:
            assignee_data = {
                "fields": {
                    "project": {"key": "SCHED"},
                    "issuetype": {"id": "10408"},
                    "summary": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º",
                    "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                    "assignee": {"name": "firstline.ws@petrovich.ru"}
                }
            }
            
            print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:")
            print(json.dumps(assignee_data, indent=2, ensure_ascii=False))
            
            result = await client.create_issue(assignee_data)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {result.get('key')}")
            
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º: {e}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–µ
        print("\n--- –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏ ---")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–µ SCHED
            existing_issue = await client.get_issue("SCHED-143316")
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ SCHED-143316")
            print(f"–ü–æ–ª—è –∑–∞—è–≤–∫–∏:")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            with open('sched_existing_issue.json', 'w', encoding='utf-8') as f:
                issue_data = existing_issue.dict() if hasattr(existing_issue, 'dict') else existing_issue.__dict__
                json.dump(issue_data, f, ensure_ascii=False, indent=2, default=str)
            print("üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'sched_existing_issue.json'")
            
        except JiraError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ: {e}")

if __name__ == "__main__":
    asyncio.run(test_sched_creation()) 