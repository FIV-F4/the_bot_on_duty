# keyboards.py
from bot_state import bot_state
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from config import PROBLEM_LEVELS, PROBLEM_SERVICES


def create_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üì∏ JIRA/Confluence"),
        KeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å"),
        KeyboardButton(text="üõÇ –£–ø—Ä–∞–≤–ª—è—Ç—å"),
        KeyboardButton(text="üìï –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è"),
        KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True)


def create_view_selection_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞–±–æ—Ç"),
        KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å JIRA"),
        KeyboardButton(text="üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Confluence"),
        KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
    )
    builder.adjust(1, 1, 1)
    return builder.as_markup(resize_keyboard=True)


def create_message_type_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üö® –°–±–æ–π", callback_data="message_type_alarm"),
        InlineKeyboardButton(text="üîß –†–∞–±–æ—Ç–∞", callback_data="message_type_maintenance")
    )
    builder.row(
        InlineKeyboardButton(text="üìù –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="message_type_regular")
    )
    return builder.as_markup()


def create_cancel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def create_yes_no_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="‚úÖ –î–∞"),
        KeyboardButton(text="‚ùå –ù–µ—Ç")
    )
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def create_confirmation_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
        KeyboardButton(text="–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


# --- –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª—è—Ç—å---

def create_action_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="action_stop"),
        InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data="action_extend")
    )
    return builder.as_markup()


def create_extension_time_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï 30 –º–∏–Ω", callback_data="extend_30_min"),
        InlineKeyboardButton(text="‚ûï 1 —á–∞—Å", callback_data="extend_1_hour"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="extend_cancel")
    )
    return builder.as_markup()


def create_alarm_selection_keyboard(alarm_ids: list = None):
    builder = InlineKeyboardBuilder()
    alarm_ids = alarm_ids or []
    if not alarm_ids:
        builder.row(InlineKeyboardButton(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ–µ–≤", callback_data="select_no_alarms"))
    else:
        for alarm_id in alarm_ids:
            alarm = bot_state.active_alarms.get(alarm_id)
            if not alarm:
                continue
            btn_text = f"{alarm_id}: {alarm['issue'][:20]}..."
            builder.row(InlineKeyboardButton(text=btn_text, callback_data=f"select_alarm_{alarm_id}"))
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="select_cancel"))
    return builder.as_markup()


def create_stop_type_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üö® –°–±–æ–π üö®"),
        KeyboardButton(text="üîß –†–∞–±–æ—Ç–∞ üîß")
    )
    builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def create_maintenance_selection_keyboard(maintenances: dict):
    builder = InlineKeyboardBuilder()
    for work_id, data in maintenances.items():
        owner_info = f" (–æ—Ç {data['user_id']})" if 'user_id' in data else ""
        btn_text = f"{work_id}: {data['description'][:20]}...{owner_info}"
        builder.row(
            InlineKeyboardButton(
                text=btn_text,
                callback_data=f"select_maintenance_{work_id}"
            )
        )
    builder.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="select_cancel"))
    return builder.as_markup()

def create_reminder_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º", callback_data="reminder_extend"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º", callback_data="reminder_stop")
    )
    return builder.as_markup()

def create_event_list_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üö® –°–±–æ–∏", callback_data="show_alarms")
    builder.button(text="üîß –†–∞–±–æ—Ç—ã", callback_data="show_maintenances")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_selection")
    builder.adjust(1)
    return builder.as_markup()

def create_level_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–ª–µ–º—ã."""
    builder = InlineKeyboardBuilder()
    for i, level in enumerate(PROBLEM_LEVELS):
        builder.button(text=level, callback_data=f"lvl_{i}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()

def create_service_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞."""
    builder = InlineKeyboardBuilder()
    for i, service in enumerate(PROBLEM_SERVICES):
        builder.button(text=service, callback_data=f"svc_{i}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    return builder.as_markup()