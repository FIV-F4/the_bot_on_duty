import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from utils.helpers import is_admin, is_superadmin

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from bot_state import BotState
from config import CONFIG
from handlers import (
    start_help,
    alarm_handlers,
    screenshot,
    manage_handlers,
)
from handlers.current_events import router as current_events_router
from handlers.manage_handlers import check_reminders
print('main.py –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è')
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logger = logging.getLogger(__name__)

def setup_logging():
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = "%(asctime)s | %(name)s | %(levelname)s | %(message)s"

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    file_handler = logging.FileHandler("bot.log", encoding="utf-8")
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter(log_format))

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(logging.Formatter(log_format))

    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[file_handler, console_handler]
    )

setup_logging()  # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ –≤—Å–µ–≥–æ
logger = logging.getLogger(__name__)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_state = BotState()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if "TELEGRAM" not in CONFIG or "TOKEN" not in CONFIG["TELEGRAM"]:
    logger.critical("‚ùå –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
    sys.exit(1)


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ Unix)
    lock_file = "/tmp/bot.lock"
    try:
        import fcntl
        global lock_fd
        lock_fd = open(lock_file, 'w')
        try:
            fcntl.flock(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except (IOError, OSError):
            logger.critical("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            sys.exit(1)
    except ImportError:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ Windows")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=CONFIG["TELEGRAM"]["TOKEN"], default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    await bot_state.load_state()
    logger.info("üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(start_help.router)
    dp.include_router(alarm_handlers.router)
    dp.include_router(screenshot.router)
    dp.include_router(manage_handlers.router)
    dp.include_router(current_events_router)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    from aiogram.types import BotCommand
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="view", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å JIRA/Confluence"),
        BotCommand(command="new_message", description="–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand(command="manage", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"),
        BotCommand(command="alarm_list", description="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"),
    ]
    await bot.set_my_commands(commands)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("ü§ñ –ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        asyncio.create_task(check_reminders(bot))
        await dp.start_polling(bot)
    finally:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot_state.save_state()
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")