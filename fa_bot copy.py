import asyncio
import logging
import os
import sys
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config import CONFIG
from utils.create_jira_fa import create_failure_issue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = "%(asctime)s | %(name)s | %(levelname)s | %(message)s"

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    file_handler = logging.FileHandler("fa_bot.log", encoding="utf-8")
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter(log_format))

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(logging.Formatter(log_format))

    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[file_handler, console_handler]
    )

setup_logging()
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if "TELEGRAM" not in CONFIG or "TOKEN" not in CONFIG["TELEGRAM"]:
    logger.critical("‚ùå –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=CONFIG["TELEGRAM"]["TOKEN"],
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FAStates(StatesGroup):
    waiting_for_summary = State()
    waiting_for_description = State()
    waiting_for_level = State()
    waiting_for_service = State()
    waiting_for_naumen_type = State()
    waiting_for_stream_1c = State()
    waiting_for_influence = State()
    waiting_for_confirmation = State()

# –°–ø–∏—Å–∫–∏ –æ–ø—Ü–∏–π
PROBLEM_LEVELS = [
    "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞",
    "–ü–æ–ª–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞",
    "–ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞",
    "–ü—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞",
    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"
]

PROBLEM_SERVICES = [
    "Naumen", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞", "–£–¢–¶", "–£–¢ –Æ–Ω–∏–æ–Ω", "1–° –£–¢ –°–ü–ë", "1–° –£–¢ –°–ó–§–û",
    "1–° –£–¢ –ú–°–ö", "1–° –¶–§–°", "–£–¢ –°–ü–ë+–£–¢ –°–ó–§–û+ –£–¢ –ú–°–ö", "LMS", "–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–º–µ–Ω–∞–º–∏",
    "–°–µ—Ç—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç 1 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", "–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª RDP (trm)",
    "–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª RDP –¥–ª—è –ö–¶ (retrm)", "VPN –æ—Ñ–∏—Å–Ω—ã–π", "VPN –î–û –ö–¶",
    "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–∞—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏—è", "–ú–æ–±–∏–ª—å–Ω–∞—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏—è", "–°–µ—Ç–µ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–î–∏—Å–∫ –•)",
    "–°–∞–π—Ç Petrovich.ru", "–ß–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ", "Jira", "Confluence", "Petlocal.ru",
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–¢–µ–ª–µ–æ–ø—Ç–∏/–ú–∞–π —Ç–∞–π–º", "–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã", "Jira + Confluence",
    "b2b.stdp.ru", "Skype for business(Lync)", "DocsVision (DV)", "–£–¢ –°–ü–ë",
    "–ó–£–ü", "HR-Link", "WMS", "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"
]

NAUMEN_FAILURE_TYPES = [
    "–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "Softphone", "–ê–Ω–∫–µ—Ç–∞", "–ö–µ–π—Å—ã —Å —Å–∞–π—Ç–∞",
    "–ü–æ—á—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª", "–ß–∞—Ç (VK, WA, Telegram, Webim)", "–û—Ç—á—ë—Ç—ã", "–î—Ä—É–≥–æ–µ"
]

STREAM_1C_OPTIONS = [
    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–ö–æ–º–º–µ—Ä—Ü–∏—è", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–û–ü–¢", "–ü–∏–ö–ö", "–†–æ–∑–Ω–∏—Ü–∞ (–°–¢–¶/–ö–¶)",
    "–°–µ—Ä–≤–∏—Å—ã –æ–ø–ª–∞—Ç", "–°–∫–ª–∞–¥—Å–∫–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–§–∏–Ω–∞–Ω—Å—ã", "–≠–î–û"
]

INFLUENCE_OPTIONS = ["–ö–ª–∏–µ–Ω—Ç—ã", "–ë–∏–∑–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏—è", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üö® –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É FA", callback_data="create_fa"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    builder.adjust(1)
    return builder.as_markup()

def get_keyboard_from_list(options, add_cancel=True, is_optional=False):
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ callback_data
        builder.add(InlineKeyboardButton(text=option, callback_data=f"opt_{i}"))
    if add_cancel:
        if is_optional:
            builder.add(InlineKeyboardButton(text="–ù–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å", callback_data="skip"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á FA.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É FA' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "create_fa")
async def create_fa_task(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(FAStates.waiting_for_summary)
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏):",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback_query.answer()

@router.callback_query(F.data == "cancel")
async def cancel_operation(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
    await callback_query.answer()

@router.callback_query(F.data == "skip")
async def skip_field(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == FAStates.waiting_for_naumen_type:
        await state.update_data(naumen_type=None)
        await state.set_state(FAStates.waiting_for_stream_1c)
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ 1–° (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=get_keyboard_from_list(STREAM_1C_OPTIONS, is_optional=True)
        )
    elif current_state == FAStates.waiting_for_stream_1c:
        await state.update_data(stream_1c=None)
        await state.set_state(FAStates.waiting_for_influence)
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞:",
            reply_markup=get_keyboard_from_list(INFLUENCE_OPTIONS)
        )
    await callback_query.answer()

@router.callback_query(F.data.startswith("opt_"))
async def process_option(callback_query: types.CallbackQuery, state: FSMContext):
    option_index = int(callback_query.data.replace("opt_", ""))
    current_state = await state.get_state()
    
    if current_state == FAStates.waiting_for_level:
        if option_index < len(PROBLEM_LEVELS):
            option = PROBLEM_LEVELS[option_index]
            await state.update_data(level=option)
            await state.set_state(FAStates.waiting_for_service)
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π —Å–µ—Ä–≤–∏—Å:",
                reply_markup=get_keyboard_from_list(PROBLEM_SERVICES)
            )
    elif current_state == FAStates.waiting_for_service:
        if option_index < len(PROBLEM_SERVICES):
            option = PROBLEM_SERVICES[option_index]
            await state.update_data(service=option)
            await state.set_state(FAStates.waiting_for_naumen_type)
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –≤ Naumen (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=get_keyboard_from_list(NAUMEN_FAILURE_TYPES, is_optional=True)
            )
    elif current_state == FAStates.waiting_for_naumen_type:
        if option_index < len(NAUMEN_FAILURE_TYPES):
            option = NAUMEN_FAILURE_TYPES[option_index]
            await state.update_data(naumen_type=option)
            await state.set_state(FAStates.waiting_for_stream_1c)
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ 1–° (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
                reply_markup=get_keyboard_from_list(STREAM_1C_OPTIONS, is_optional=True)
            )
    elif current_state == FAStates.waiting_for_stream_1c:
        if option_index < len(STREAM_1C_OPTIONS):
            option = STREAM_1C_OPTIONS[option_index]
            await state.update_data(stream_1c=option)
            await state.set_state(FAStates.waiting_for_influence)
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞:",
                reply_markup=get_keyboard_from_list(INFLUENCE_OPTIONS)
            )
    elif current_state == FAStates.waiting_for_influence:
        if option_index < len(INFLUENCE_OPTIONS):
            option = INFLUENCE_OPTIONS[option_index]
            await state.update_data(influence=option)
            data = await state.get_data()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_text = (
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
                f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data['summary']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {data['level']}\n"
                f"–°–µ—Ä–≤–∏—Å: {data['service']}\n"
            )
            
            if data.get('naumen_type'):
                confirmation_text += f"–¢–∏–ø –≤ Naumen: {data['naumen_type']}\n"
            if data.get('stream_1c'):
                confirmation_text += f"–ü–æ—Ç–æ–∫ 1–°: {data['stream_1c']}\n"
            if data.get('influence'):
                confirmation_text += f"–í–ª–∏—è–Ω–∏–µ –Ω–∞: {data['influence']}\n"
            
            confirmation_text += "\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"))
            builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
            builder.adjust(2)
            
            await state.set_state(FAStates.waiting_for_confirmation)
            await callback_query.message.answer(confirmation_text, reply_markup=builder.as_markup())
    
    await callback_query.answer()

@router.callback_query(F.data == "confirm")
async def confirm_task(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Jira
        jira_response = create_failure_issue(
            summary=data['summary'],
            description=data['description'],
            problem_level=data['level'],
            problem_service=data['service'],
            naumen_failure_type=data.get('naumen_type'),
            stream_1c=data.get('stream_1c'),
            time_start_problem=datetime.now().strftime("%Y-%m-%d %H:%M"),
            influence=data.get('influence')
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Jira: {jira_response}")
        
        if jira_response and 'key' in jira_response:
            task_key = jira_response['key']
            task_url = f"https://jira.petrovich.tech/browse/{task_key}"
            await callback_query.message.answer(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: {task_key}\n"
                f"–°—Å—ã–ª–∫–∞: {task_url}",
                reply_markup=get_main_keyboard()
            )
        else:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Jira. –û—Ç–≤–µ—Ç: {jira_response}"
            logger.error(error_msg)
            raise Exception(error_msg)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ Jira: {str(e)}", exc_info=True)
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()
    await callback_query.answer()

@router.message(FAStates.waiting_for_summary)
async def process_summary(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        return

    await state.update_data(summary=message.text)
    await state.set_state(FAStates.waiting_for_description)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(FAStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())
        return

    await state.update_data(description=message.text)
    await state.set_state(FAStates.waiting_for_level)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=get_keyboard_from_list(PROBLEM_LEVELS)
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ FA –±–æ—Ç–∞...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    from aiogram.types import BotCommand
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    try:
        logger.info("ü§ñ FA –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        await dp.start_polling(bot)
    finally:
        logger.info("üõë FA –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã FA –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º") 